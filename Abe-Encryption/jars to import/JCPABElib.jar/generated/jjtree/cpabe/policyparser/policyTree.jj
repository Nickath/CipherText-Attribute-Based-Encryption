/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. policyTree.jj */
/*@egen*//* policy.jjt */

options {
    STATIC = false;
                 
}

PARSER_BEGIN(ParseTree)
package cpabe.policyparser;
    import java.io.Reader;
    import java.io.StringReader;

    public class ParseTree/*@bgen(jjtree)*/implements ParseTreeTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParseTreeState jjtree = new JJTParseTreeState();

/*@egen*/
        public static void main(String[] args) throws ParseException, TokenMgrError {
            ParseTree tree = new ParseTree(System.in);
            ASTStart ast = tree.Start();
            ast.dump("");
        }
        
        public static ASTStart createParseTree(String input) throws ParseException, TokenMgrError {
            Reader reader = new StringReader(input);
            ParseTree parser = new ParseTree(reader);
            return parser.Start();
        }
    }
PARSER_END(ParseTree)

SKIP : { " " | "\t" }
SKIP : { "\n" | "\r" | "\r\n" }

/* TOKEN : { < OPEN_PAR : "(" > } */
/* TOKEN : { < CLOSE_PAR : ")" > } */

TOKEN : { < OR : "or" | "OR" > }
TOKEN : { < AND : "and" | "AND" > }
TOKEN : { < OF : "of" | "OF" > }
TOKEN : { < COMMA : "," > }

TOKEN : { < OP : <GEQ> | <LEQ> | <EQ> | <LT> | <GT> > }
TOKEN : { < #GEQ : ">=" > }
TOKEN : { < #LEQ : "<=" > }
TOKEN : { < #EQ : "=" > }
TOKEN : { < #LT : "<" > }
TOKEN : { < #GT : ">" > }

TOKEN : { < ATTNAME : <LETTER>(<LETTERDIGIT>)* > }
TOKEN : { < NUMBER : (<DIGIT>)+ > }
TOKEN : { < DOUBLE : ("-")?(<DIGIT>)+("." | ",")?(<DIGIT>)* > }

TOKEN : { < #LETTER : ["a"-"z", "A"-"Z"] > }
TOKEN : { < #DIGIT : ["0"-"9"] > }
TOKEN : { < #LETTERDIGIT : <LETTER> | <DIGIT> | "_" > }

ASTStart Start() :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    Expression() (";" | <EOF>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression()       :
{
    Token t = null;
}
{/*@bgen(jjtree) #Expression(> 1) */
    {
      ASTExpression jjtn001 = new ASTExpression(JJTEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
    UnaryPolicy()
    ((t = <OR>  { jjtn001.setType(t.image); }
    | t = <AND> { jjtn001.setType(t.image); } ) 
    UnaryPolicy())*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/                
}

void UnaryPolicy()       :
{}
{
    Attribute() | "(" Expression() ")" | Of()
}

void Of() :
{/*@bgen(jjtree) Of */
    ASTOf jjtn000 = new ASTOf(JJTOF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Of */
    try {
/*@egen*/
    t = <NUMBER>
    <OF>
    "(" 
    Expression()
    (<COMMA> Expression())*
    ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setNumber(t.image); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
    
}

void Attribute()       :
{
    Token att;
}
{/*@bgen(jjtree) #Attribute( jjtree . nodeArity ( ) < 1) */
    {
      ASTAttribute jjtn001 = new ASTAttribute(JJTATTRIBUTE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
    att = <ATTNAME>
    [ NumericalAttribute(att) | AreaAttribute(att) ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) < 1);
      jjtc001 = false;
    }
/*@egen*/
    { jjtn001.setName(att.image); }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) < 1);
      }
    }
/*@egen*/                                   
} 

void NumericalAttribute(Token name) :
{/*@bgen(jjtree) NumericalAttribute */
        ASTNumericalAttribute jjtn000 = new ASTNumericalAttribute(JJTNUMERICALATTRIBUTE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token op;
	Token value;
}
{/*@bgen(jjtree) NumericalAttribute */
        try {
/*@egen*/
	op = <OP>
	value = <NUMBER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setValues(name.image, op.image, value.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AreaAttribute(Token name) :
{/*@bgen(jjtree) AreaAttribute */
    ASTAreaAttribute jjtn000 = new ASTAreaAttribute(JJTAREAATTRIBUTE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token lat1;
    Token lon1;
    Token lat2;
    Token lon2;
}
{/*@bgen(jjtree) AreaAttribute */
    try {
/*@egen*/
    "~"
    lat1 = <DOUBLE>
    "~"
    lon1 = <DOUBLE>
    "~"
    lat2 = <DOUBLE>
    "~"
    lon2 = <DOUBLE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setValues(name.image, lon1.image, lat1.image, lon2.image, lat2.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}