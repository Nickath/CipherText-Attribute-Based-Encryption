/* policy.jjt */

options {
    STATIC = false;
    MULTI = true;
}

PARSER_BEGIN(ParseTree)
package cpabe.policyparser;
    import java.io.Reader;
    import java.io.StringReader;

    public class ParseTree {
        public static void main(String[] args) throws ParseException, TokenMgrError {
            ParseTree tree = new ParseTree(System.in);
            ASTStart ast = tree.Start();
            ast.dump("");
        }
        
        public static ASTStart createParseTree(String input) throws ParseException, TokenMgrError {
            Reader reader = new StringReader(input);
            ParseTree parser = new ParseTree(reader);
            return parser.Start();
        }
    }
PARSER_END(ParseTree)

SKIP : { " " | "\t" }
SKIP : { "\n" | "\r" | "\r\n" }

/* TOKEN : { < OPEN_PAR : "(" > } */
/* TOKEN : { < CLOSE_PAR : ")" > } */

TOKEN : { < OR : "or" | "OR" > }
TOKEN : { < AND : "and" | "AND" > }
TOKEN : { < OF : "of" | "OF" > }
TOKEN : { < COMMA : "," > }

TOKEN : { < OP : <GEQ> | <LEQ> | <EQ> | <LT> | <GT> > }
TOKEN : { < #GEQ : ">=" > }
TOKEN : { < #LEQ : "<=" > }
TOKEN : { < #EQ : "=" > }
TOKEN : { < #LT : "<" > }
TOKEN : { < #GT : ">" > }

TOKEN : { < ATTNAME : <LETTER>(<LETTERDIGIT>)* > }
TOKEN : { < NUMBER : (<DIGIT>)+ > }
TOKEN : { < DOUBLE : ("-")?(<DIGIT>)+("." | ",")?(<DIGIT>)* > }

TOKEN : { < #LETTER : ["a"-"z", "A"-"Z"] > }
TOKEN : { < #DIGIT : ["0"-"9"] > }
TOKEN : { < #LETTERDIGIT : <LETTER> | <DIGIT> | "_" > }

ASTStart Start() :
{}
{
    Expression() (";" | <EOF>)
    { return jjtThis; }
}

void Expression() #void :
{
    Token t = null;
}
{
    (
    UnaryPolicy()
    ((t = <OR>  { jjtThis.setType(t.image); }
    | t = <AND> { jjtThis.setType(t.image); } ) 
    UnaryPolicy())*
    ) #Expression(>1)
}

void UnaryPolicy() #void :
{}
{
    Attribute() | "(" Expression() ")" | Of()
}

void Of() :
{
    Token t;
}
{
    t = <NUMBER>
    <OF>
    "(" 
    Expression()
    (<COMMA> Expression())*
    ")"
    { jjtThis.setNumber(t.image); }
    
}

void Attribute() #void :
{
    Token att;
}
{
    (
    att = <ATTNAME>
    [ NumericalAttribute(att) | AreaAttribute(att) ]
    { jjtThis.setName(att.image); }
    ) #Attribute(jjtree.nodeArity() < 1)
} 

void NumericalAttribute(Token name) :
{
	Token op;
	Token value;
}
{
	op = <OP>
	value = <NUMBER>
	{ jjtThis.setValues(name.image, op.image, value.image); }
}

void AreaAttribute(Token name) :
{
    Token lat1;
    Token lon1;
    Token lat2;
    Token lon2;
}
{
    "~"
    lat1 = <DOUBLE>
    "~"
    lon1 = <DOUBLE>
    "~"
    lat2 = <DOUBLE>
    "~"
    lon2 = <DOUBLE>
    { jjtThis.setValues(name.image, lon1.image, lat1.image, lon2.image, lat2.image); }
}
